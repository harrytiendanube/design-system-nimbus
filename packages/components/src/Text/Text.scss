@import "../../styles/core";

// Text

$text-body-colors: (
  default: $color-body-text,
  primary: $color-primary-pure,
  secondary: $color-secondary-pure,
  success: $color-success-pure,
  warning: $color-warning-pure,
  danger: $color-danger-pure,
  light: $color-grey-75,
);

$text-background-colors: (
  default: $color-background-secondary,
  primary: $color-primary-light,
  secondary: $color-secondary-light,
  success: $color-success-light,
  warning: $color-warning-light,
  danger: $color-danger-light,
  light: $color-default,
);

@mixin nimbus--text-color {
  @each $name, $color in $text-body-colors {
    &--#{$name} {
      color: $color;

      svg {
        fill: $color;
      }
    }
  }
}

@mixin nimbus--text-background {
  @each $name, $color in $text-background-colors {
    &--#{$name} {
      background-color: $color;
      border-radius: $actions-border-radius;
      color: $color-body-text;
      display: block;
      padding: $spacing-x-small;

      &.#{$prefix}--text-span {
        display: inline-block;
      }

      svg {
        fill: $color-body-text;
      }
    }
  }
}

.#{$prefix}--text {
  display: inline-block;

  svg {
    margin-right: $spacing-xx-small;
    margin-top: -$spacing-xx-small;
  }

  &.#{$prefix}--text-size--featured {
    @include nimbus--type("text-featured");
  }

  &.#{$prefix}--text-size--base {
    @include nimbus--type("text-body");
  }

  &.#{$prefix}--text-size--small {
    @include nimbus--type("text-label");
  }

  &.#{$prefix}--text-size--tiny {
    @include nimbus--type("text-small-tight");
  }

  &.#{$prefix}--text--block {
    display: block;
  }

  &.#{$prefix}--text--bold {
    font-weight: map-get($nimbus--font-weights, "bold");
  }

  &.#{$prefix}--text-align--left {
    text-align: left;
  }

  &.#{$prefix}--text-align--right {
    text-align: right;
  }

  &.#{$prefix}--text-align--center {
    text-align: center;
  }

  &.#{$prefix}--text-color {
    @include nimbus--text-color;
  }

  &.#{$prefix}--text-background {
    @include nimbus--text-background;
  }

  &.#{$prefix}--text--trim {
    /* stylelint-disable-next-line property-no-vendor-prefix */
    -webkit-box-orient: vertical;
    /* stylelint-disable-next-line value-no-vendor-prefix */
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;

    @for $n from 1 to 10 {
      &.#{$prefix}--text--trim-#{$n} {
        -webkit-line-clamp: $n;
      }
    }
  }
}

$text-skeleton-widths: (
  small: 40px,
  medium: 80px,
  large: 120px,
  fill: 100%,
);

$text-skeleton-size-small: (
  height: $font-size-small,
  margin: $spacing-xx-small 0,
);

$text-skeleton-size-base: (
  height: $font-size-medium,
  margin: $spacing-xx-small 0,
);

$text-skeleton-size-featured: (
  height: $font-size-xxx-large,
  margin: $spacing-x-small 0,
);

$text-skeleton-tokens: (
  small: $text-skeleton-size-small,
  base: $text-skeleton-size-base,
  featured: $text-skeleton-size-featured,
);

.#{$prefix}--text-skeleton {
  @include nimbus--skeleton(0, 0, 0, 0);

  @each $name, $width in $text-skeleton-widths {
    &--width-#{$name} {
      width: $width;
    }
  }

  @each $name, $size in $text-skeleton-tokens {
    &--size-#{$name} {
      $token: map-get($text-skeleton-tokens, $name);

      @each $property, $value in $token {
        #{$property}: $value;
      }
    }
  }
}
